// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MobileIntelligence
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AdSupport
import AppTrackingTransparency
import CallKit
import SystemConfiguration.CaptiveNetwork
import CommonCrypto
import CommonCrypto.CommonDigest
import CoreLocation
import CoreMotion
import CoreTelephony
import CryptoKit
import DeviceCheck
import Foundation
import MessageUI
@_exported import MobileIntelligence
import ReplayKit
import SafariServices
import Security
import Swift
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
public enum TextFieldType : Swift.String {
  case userid
  case email
  case number
  case password
  case other
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
}
@_hasMissingDesignatedInitializers public class MobileIntelligence {
  @discardableResult
  convenience public init(withOptions options: MobileIntelligence.Options)
  public class func trackField(forKey key: Swift.String, text: Swift.String)
  public class func trackFieldFocus(forKey key: Swift.String, hasFocus: Swift.Bool)
  public class func submitData(completion: @escaping ((MobileIntelligence.Response) -> ()))
  public class func updateOptions(options: MobileIntelligence.UpdateOptions, completion: ((MobileIntelligence.Response) -> ())? = nil)
  public class func getSessionKey() -> Swift.String
  public class func silentAuth(forNumber phoneNumber: Swift.String, correlationId: Swift.String, completion: @escaping ((Swift.Bool) -> ()))
  @objc deinit
}
public class OptionsBuilder {
  public init()
  public func setClientId(with clientId: Swift.String) -> MobileIntelligence.OptionsBuilder
  public func setSessionKey(with sessionKey: Swift.String) -> MobileIntelligence.OptionsBuilder
  public func setUserIdHash(with userIdHash: Swift.String) -> MobileIntelligence.OptionsBuilder
  public func setEnvironment(with environment: Swift.String) -> MobileIntelligence.OptionsBuilder
  public func setFlow(with flow: Swift.String) -> MobileIntelligence.OptionsBuilder
  public func setPartnerId(with partnerId: Swift.String) -> MobileIntelligence.OptionsBuilder
  public func enableBehaviorBiometrics(with enableBehaviorBiometrics: Swift.Bool) -> MobileIntelligence.OptionsBuilder
  public func enableClipboardTracking(with enableClipboardTracking: Swift.Bool) -> MobileIntelligence.OptionsBuilder
  public func enableFieldTracking(with enableFieldTracking: Swift.Bool) -> MobileIntelligence.OptionsBuilder
  public func setShouldAutoSubmitOnInit(with shouldAutoSubmitOnInit: Swift.Bool) -> MobileIntelligence.OptionsBuilder
  public func setSourcePlatform(with sourcePlatform: Swift.String) -> MobileIntelligence.OptionsBuilder
  public func build() -> MobileIntelligence.Options
  @objc deinit
}
public struct Options : Swift.Codable {
  public var clientId: Swift.String?
  public var sessionKey: Swift.String?
  public var userIdHash: Swift.String?
  public var environment: Swift.String?
  public var flow: Swift.String?
  public var partnerId: Swift.String?
  public var enableBehaviorBiometrics: Swift.Bool
  public var enableClipboardTracking: Swift.Bool
  public var enableFieldTracking: Swift.Bool
  public static let ENV_SANDBOX: Swift.String
  public static let ENV_PRODUCTION: Swift.String
  public init()
  @available(*, deprecated, message: "Please use OptionsBuilder")
  public init(clientId: Swift.String, sessionKey: Swift.String, userIdHash: Swift.String, environment: Swift.String, enableBehaviorBiometrics: Swift.Bool, flow: Swift.String, partnerId: Swift.String, enableClipboardTracking: Swift.Bool = false, enableFieldTracking: Swift.Bool = true)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct UpdateOptions : Swift.Codable {
  public var userIdHash: Swift.String?
  public var sessionKey: Swift.String
  public var flow: Swift.String
  public init()
  public init(sessionKey: Swift.String = "", userIdHash: Swift.String?, flow: Swift.String = "")
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum ErrorType : Swift.Error, Foundation.LocalizedError {
  case noInternetConnection
  case parseResponseFail
  case parseUrlFail
  case notFound
  case validationError
  case serverError
  case defaultError
  public var errorDescription: Swift.String? {
    get
  }
  public static func == (a: MobileIntelligence.ErrorType, b: MobileIntelligence.ErrorType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct EventsResponse : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct CorIdResponse : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Response : Swift.Codable {
  public var status: Swift.Bool?
  public var message: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DevicesResponse : Swift.Codable {
  public var id: Swift.String?
  public var level: Swift.String?
  public var attributes: [Swift.String : [Swift.String]]?
  public var signals: [MobileIntelligence.SignalsModel]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SignalsModel : Swift.Codable {
  public var key: Swift.String?
  public var value: Swift.String?
  public var confidence: Swift.Int?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum Model : Swift.String {
  case simulator, iPod1, iPod2, iPod3, iPod4, iPod5, iPod6, iPod7, iPad2, iPad3, iPad4, iPadAir, iPadAir2, iPadAir3, iPadAir4, iPad5, iPad6, iPad7, iPad8, iPad9, iPadMini, iPadMini2, iPadMini3, iPadMini4, iPadMini5, iPadMini6, iPadPro9_7, iPadPro10_5, iPadPro11, iPadPro12_9, iPadPro2_12_9, iPadPro3_12_9, iPadPro4_12_9, iPadPro5_12_9, iPhone4, iPhone4S, iPhone5, iPhone5S, iPhone5C, iPhone6, iPhone6Plus, iPhone6S, iPhone6SPlus, iPhoneSE, iPhone7, iPhone7Plus, iPhone8, iPhone8Plus, iPhoneX, iPhoneXS, iPhoneXSMax, iPhoneXR, iPhone11, iPhone11Pro, iPhone11ProMax, iPhoneSE2, iPhone12mini, iPhone12, iPhone12Pro, iPhone12ProMax, iPhone13Mini, iPhone13, iPhone13Pro, iPhone13ProMax, AppleTV1, AppleTV2, AppleTV3, AppleTV4, AppleTV_4K, AppleTV2_4K, unrecognized
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public var type: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var phoneType: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public static let modelIdentifier: Swift.String
  @_Concurrency.MainActor(unsafe) public func ipAddress() -> (ipv4: Swift.String?, ipv6: Swift.String?)?
}
public struct KycStatusResponse : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension MobileIntelligence.TextFieldType : Swift.Equatable {}
extension MobileIntelligence.TextFieldType : Swift.Hashable {}
extension MobileIntelligence.TextFieldType : Swift.RawRepresentable {}
extension MobileIntelligence.ErrorType : Swift.Equatable {}
extension MobileIntelligence.ErrorType : Swift.Hashable {}
extension MobileIntelligence.Model : Swift.Equatable {}
extension MobileIntelligence.Model : Swift.Hashable {}
extension MobileIntelligence.Model : Swift.RawRepresentable {}
